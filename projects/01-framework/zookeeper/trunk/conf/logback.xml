<?xml version="1.0" encoding="UTF-8"?>
<!-- 推荐使用logback日志框架 configuration 
	debug 是否打印logbak的内部调试日志 
	scan 定时刷新，默认1分钟 
	scanPeriod 定时刷新时间，单位 milliseconds、seconds、minutes 和 hours -->
<configuration debug="false" scan="true" scanPeriod="60 seconds">
	<property name="CHARSET" value="utf-8" /><!-- 字符集 -->
	<property name="LOG_HOME" value="log" /><!-- log目录 -->
	<property name="BACKUP" value="${LOG_HOME}/%d{yyyy-MM-dd}" /><!-- 日志备份目录 -->
	
	<!-- 日志输出格式 类路径c 行号l 方法名m 尽量避免使用 -->
	<!-- 日志输出格式, %c{0} 表示打印logger名，若logger名是一个类路径，则打印最后一个.右边的部分 -->
	<property name="PATTERN_DEF" value="[%d{yyyy-MM-dd HH:mm:ss SSS}] [%-5p] [%c{-20}] [%L]- %m%n" />

	<include file="conf/logback_monitor.xml" />

	<!-- 控制台输出 -->
	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<!-- 这里不需要配置字符集，根据系统默认即可 
			<charset>${CHARSET}</charset> -->
			<pattern>${PATTERN_DEF}</pattern>
		</encoder>
		<target>System.out</target><!-- System.out|System.err -->
	</appender>

	<!-- 文件输出 -->
	<appender name="file_log"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/log.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${BACKUP}/log%d{yyyy-MM-dd}-%i.log.zip
			</fileNamePattern>
			<maxHistory>30</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<charset>${CHARSET}</charset>
			<pattern>${PATTERN_DEF}</pattern>
		</encoder>
	</appender>

	<!-- 文件输出 -->
	<appender name="file_exception"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/exception.log</file>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch> <!-- 用于配置符合过滤条件的操 NEUTRAL中立 ACCEPT接受 DENY否定 -->
			<onMismatch>DENY</onMismatch> <!-- 用于配置符合过滤条件的操 -->
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${BACKUP}/exception%d{yyyy-MM-dd}-%i.log.zip
			</fileNamePattern>
			<maxHistory>30</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<charset>${CHARSET}</charset>
			<pattern>${PATTERN_DEF}</pattern>
		</encoder>
	</appender>

	<!-- 文件输出 -->
	<appender name="file_warn"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/warn.log</file>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${BACKUP}/warn%d{yyyy-MM-dd}-%i.log.zip
			</fileNamePattern>
			<maxHistory>30</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<charset>${CHARSET}</charset>
			<pattern>${PATTERN_DEF}</pattern>
		</encoder>
	</appender>

	<!-- 文件输出 -->
	<appender name="file_sql"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<prudent>false</prudent><!-- 支持JVM同时操作一个日志 当prudent模式关闭时，每秒logging event的吞吐量为100,000，当prudent模式开启时，大约为每秒33,000 -->
		<file>${LOG_HOME}/sql.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${BACKUP}/sql%d{yyyy-MM-dd}-%i.log.zip
			</fileNamePattern>
			<maxHistory>30</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<charset>${CHARSET}</charset>
			<pattern>${PATTERN_DEF}</pattern>
		</encoder>
	</appender>

	<!-- 异步文件输出 -->
	<appender name="async" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>512</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="file_log" />
	</appender>

	<!-- additivity="true" 表示logger的日志会打印到root定义的appender中 
		 additivity="false" 表示logger的日志只输出到定义的appender中 -->
	<logger name="sql" level="debug" additivity="true">
		<appender-ref ref="file_sql" />
	</logger>

	<!-- Catt配置模块输出控制,只输出警告级别信息 -->
	<logger name="MultipleUtilityConf" level="warn" additivity="true" />

	<!-- proxool日志只输出警告级别日志 -->
	<logger name="org.logicalcobwebs" level="info" additivity="false">
		<appender-ref ref="file_sql" />
	</logger>

	<!-- 启用appender，不配置的appender默认不生效 -->
	<root level="debug">
		<appender-ref ref="stdout" />
		<appender-ref ref="file_log" />
		<appender-ref ref="file_exception" />
		<appender-ref ref="file_warn" />
	</root>
</configuration>